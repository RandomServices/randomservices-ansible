
events {
  # Accept as many connections as possible, after nginx gets notification about a new connection.
  # May flood worker_connections, if that option is set too low.
  multi_accept on;

  # essential for linux, optimized to serve many clients with each thread
  use epoll;

  # Determines how many clients will be served by each worker process.
  # (Max clients = worker_connections * worker_processes)
  # "Max clients" is also limited by the number of socket connections available on the system (~64k)
  worker_connections 256;
}

error_log /var/log/nginx/error.log error;

include performance.conf;

http {
  include       mime.types;
  default_type  application/octet-stream;

  # log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
  #                   '$status $body_bytes_sent "$http_referer" '
  #                   '"$http_user_agent" "$http_x_forwarded_for"';

  sendfile        on;

  server {
    listen       80;
    server_name  localhost;

    location /nginx_status {
      # copied from http://blog.kovyrin.net/2006/04/29/monitoring-nginx-with-rrdtool/
      stub_status on;
      access_log   off;
      allow 127.0.0.1;
      deny all;
    }
  }

  # another virtual host using mix of IP-, name-, and port-based configuration
  #
  # server {
  #   listen       8000;
  #   listen       somename:8080;
  #   server_name  somename  alias  another.alias;
  # 
  #   location / {
  #     root   html;
  #     index  index.html index.htm;
  #   }
  # }

  # HTTPS server
  #
  # server {
  #   listen       443 ssl;
  #   server_name  localhost;
  # 
  #   ssl_certificate      cert.pem;
  #   ssl_certificate_key  cert.key;
  # 
  #   ssl_session_cache    shared:SSL:1m;
  #   ssl_session_timeout  5m;
  # 
  #   ssl_ciphers  HIGH:!aNULL:!MD5;
  #   ssl_prefer_server_ciphers  on;
  # 
  #   location / {
  #     root   html;
  #     index  index.html index.htm;
  #   }
  # }

  # Insert site-specific configurations here.
}
